from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, Poll
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, CallbackQueryHandler, \
    PollAnswerHandler, PollHandler
from credits2 import bot_token
import requests
from bs4 import BeautifulSoup as bs
from random import randint


bot = Bot(bot_token)
updater = Updater(bot_token, use_context=True)
dispatcher = updater.dispatcher

weekdays = {1: 'MO.txt', 2: 'TU.txt', 3: 'WE.txt', 4: 'TH.txt', 5: 'FR.txt', 6: "SA.txt", 7: 'SU.txt'}
day_num = 0


def start(update, context):
    context.bot.send_message(update.effective_chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫üìî. –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è!üëã\n\n'
                                                       '/show - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüìì\n/change - –∏–∑–º–µ–Ω–∏—Ç—å\n/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µüñä(—Å–Ω–∞—á–∞–ª–∞ "/show")\n'
                                                       '/del - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ‚úñ (—Å–Ω–∞—á–∞–ª–∞ "/show")\n/lol - —è —É—Å—Ç–∞–ª! –†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç\n')


def parse_joke(update, context):
    url = 'https://www.mk.ru/editions/daily/2022/12/21/goryachaya-pyaterka-anekdotov-mk.html'
    response = requests.get(url).text
    soup = bs(response, 'html.parser')
    joke1 = soup.find('div', class_='article__body').text
    joke1 = joke1.replace('\n', '').split('\xa0')
    num_of_joke = randint(0, len(joke1) - 1)
    context.bot.send_message(update.effective_chat.id, ''.join(joke1[num_of_joke]))


def show_schedule(update, context):
    keyboard = [
        [InlineKeyboardButton('–ü–ù', callback_data='1'), InlineKeyboardButton('–íT', callback_data='2'),
         InlineKeyboardButton('–°–†', callback_data='3')],
        [InlineKeyboardButton('–ß–¢', callback_data='4'), InlineKeyboardButton('–ü–¢', callback_data='5'),
        InlineKeyboardButton('–°–ë', callback_data='6'), InlineKeyboardButton('–í–°', callback_data='7')]
    ]
    update.message.reply_text('–ù—É-—Å, –¥—Ä—É–∂–∏—â–µ, –≤—ã–±–∏—Ä–∞–π...', reply_markup=InlineKeyboardMarkup(keyboard))


def action_button(update, context):
    keyboard = [
        [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data='+'), InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data='-')],
        [InlineKeyboardButton('–ò —Ç–∞–∫ —Å–æ–π–¥—ë—Ç...', callback_data='0')]
    ]
    update.message.reply_text('–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è: ', reply_markup=InlineKeyboardMarkup(keyboard))


def read_file(week_dict, day_num):
    with open(week_dict[day_num], 'r', encoding='utf-8') as my_f:
        return my_f.readlines()


def change_file(week_dict, row_to_clean):
    row = row_to_clean - 10
    with open(week_dict[day_num], 'r', encoding='utf-8') as my_file:
        current_txt = my_file.readlines()
    with open(week_dict[day_num], 'w', encoding='utf-8') as my_file:
        current_txt.pop(row)
        new_txt = ''.join(current_txt)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        my_file.write(new_txt)
    with open(week_dict[day_num], 'r', encoding='utf-8') as my_file:
        return my_file.readlines()


def delete_event(update, context):
    txt = read_file(weekdays, day_num)
    keyboard = []
    for i in range(1, len(txt)):
        sbj = [InlineKeyboardButton(txt[i], callback_data=str(i+10))]
        keyboard.append(sbj)
    update.message.reply_text('–ß—Ç–æ —É–¥–∞–ª—è–µ–º?', reply_markup=InlineKeyboardMarkup(keyboard))


def get_new_data(update, context):
    new_data = update.message.text
    with open(weekdays[day_num], 'a', encoding='utf-8') as my_file:
        my_file.writelines('\n' + new_data)
    with open(weekdays[day_num], 'r', encoding='utf-8') as my_file:
        new_sch = my_file.readlines()
    context.bot.send_message(update.effective_chat.id, ''.join(new_sch))


def add_in_schedule(update, context):
    context.bot.send_message(update.effective_chat.id, '–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?üìù')


def button_push(update, context):
    global day_num
    query = update.callback_query
    query.answer()
    if query.data == '0':
        context.bot.send_message(update.effective_chat.id, '–•–æ–∑—è–∏–Ω - –±–∞—Ä–∏–Ω')
    elif query.data == '-':
        context.bot.send_message(update.effective_chat.id, '–ö–æ–º–∞–Ω–¥–∞ "/del"')
    elif query.data == '+':
        context.bot.send_message(update.effective_chat.id, '–ö–æ–º–∞–Ω–¥–∞ "/add"')
    elif int(query.data) > 10:
        context.bot.send_message(update.effective_chat.id, ''.join(change_file(weekdays, int(query.data))))
    else:
        context.bot.send_message(update.effective_chat.id, ''.join(read_file(weekdays, int(query.data))))
        day_num = int(query.data)


def unknown_command(update, context):
    context.bot.send_message(update.effective_chat.id, '–ö–∞–∂–µ—Ç—Å—è, –º—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ –ø–æ–Ω—è–ª–∏. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ–∫!')


def repeat_message(update, context):
    msg = update.message.text.upper()
    if '?' in msg:
        context.bot.send_message(update.effective_chat.id, '...–Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å.')
    elif msg.isalpha:
        context.bot.send_message(update.effective_chat.id, msg)


start_handler = CommandHandler('start', start)  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–∞—Ä—Ç" –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
show_handler = CommandHandler('show', show_schedule)
joke_handler = CommandHandler('lol', parse_joke)
button_handler = CallbackQueryHandler(button_push)
action_handler = CommandHandler('change', action_button)
delete_handler = CommandHandler('del', delete_event)
add_handler = CommandHandler('add', add_in_schedule)
new_event_handler = MessageHandler(Filters.text, get_new_data)

message_handler = MessageHandler(Filters.text, repeat_message)  # —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏
unknown_handler = MessageHandler(Filters.command, unknown_command)  # —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏


dispatcher.add_handler(start_handler)
dispatcher.add_handler(show_handler)
dispatcher.add_handler(joke_handler)
dispatcher.add_handler(button_handler)
dispatcher.add_handler(action_handler)
dispatcher.add_handler(delete_handler)
dispatcher.add_handler(add_handler)
dispatcher.add_handler(new_event_handler)

dispatcher.add_handler(message_handler)
dispatcher.add_handler(unknown_handler)


updater.start_polling()
updater.idle()